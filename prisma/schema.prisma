generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Organization {
  id               String           @id @default(cuid())
  name             String
  slug             String           @unique
  domain           String?          @unique
  logo             String?
  settings         String           @default("{}")
  plan             SubscriptionPlan @default(FREE)
  planLimits       String           @default("{}")
  isActive         Boolean          @default(true)
  trialEndsAt      DateTime?
  stripeCustomerId String?          @unique
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  assessments      Assessment[]
  candidates       Candidate[]
  githubAnalyses   GitHubAnalysis[]
  interviews       Interview[]
  invitations      Invitation[]
  subscriptions    Subscription[]
  uploadedFiles    UploadedFile[]
  usageMetrics     UsageMetric[]
  users            User[]

  @@map("organizations")
}

model Subscription {
  id                   String             @id @default(cuid())
  organizationId       String
  plan                 SubscriptionPlan
  status            SubscriptionStatus  @default(ACTIVE)
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean            @default(false)
  stripeCustomerId     String?
  stripeSubscriptionId String?
  stripePriceId        String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  organization         Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Invitation {
  id             String           @id @default(cuid())
  organizationId String
  email          String
  role           UserRole
  invitedBy      String
  token          String           @unique
  status         InvitationStatus @default(PENDING)
  expiresAt      DateTime
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, email])
  @@map("invitations")
}

model UsageMetric {
  id             String       @id @default(cuid())
  organizationId String
  metricType     String
  value          Int          @default(0)
  period         String
  date           DateTime
  createdAt      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, metricType, period, date])
  @@map("usage_metrics")
}

model User {
  id             String         @id @default(cuid())
  organizationId String
  name           String?
  email          String         @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  role           UserRole  @default(CANDIDATE)
  company        String?
  position       String?
  isActive       Boolean        @default(true)
  lastLoginAt    DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  accounts       Account[]
  assessments    Assessment[]
  candidates     Candidate[]
  interviews     Interview[]
  sessions       Session[]
  uploadedFiles  UploadedFile[] @relation("UserUploads")
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Candidate {
  id             String           @id @default(cuid())
  userId         String?
  organizationId String
  name           String
  email          String           @unique
  phone          String?
  githubUsername String?
  githubUrl      String?
  resume         String?
  coverLetter    String?
  position       String
  experience     String
  skills         String
  status         CandidateStatus  @default(APPLIED)
  createdBy      String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  assessments    Assessment[]
  organization   Organization     @relation(fields: [organizationId], references: [id])
  user           User?            @relation(fields: [userId], references: [id])
  githubAnalysis GitHubAnalysis[]
  interviews     Interview[]
  uploadedFiles  UploadedFile[]   @relation("CandidateFiles")

  @@map("candidates")
}

model Interview {
  id              String          @id @default(cuid())
  title           String
  description     String?
  candidateId     String
  interviewerId   String
  organizationId  String
  type            InterviewType
  status          InterviewStatus @default(SCHEDULED)
  scheduledAt     DateTime
  startedAt       DateTime?
  completedAt     DateTime?
  duration        Int?
  aiPersonality   String          @default("professional")
  techStack       String
  difficultyLevel String          @default("intermediate")
  questions       String
  notes           String?
  score           Float?
  recommendation  String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  assessments     Assessment[]
  organization    Organization    @relation(fields: [organizationId], references: [id])
  interviewer     User            @relation(fields: [interviewerId], references: [id])
  candidate       Candidate       @relation(fields: [candidateId], references: [id])

  @@map("interviews")
}

model Assessment {
  id                  String                   @id @default(cuid())
  interviewId         String
  candidateId         String
  assessorId          String
  organizationId      String
  technicalScore      Float
  communicationScore  Float
  problemSolvingScore Float
  cultureScore        Float
  overallScore        Float
  feedback            String
  recommendation      AssessmentRecommendation
  strengths           String
  weaknesses          String
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
  organization        Organization             @relation(fields: [organizationId], references: [id])
  assessor            User                     @relation(fields: [assessorId], references: [id])
  candidate           Candidate                @relation(fields: [candidateId], references: [id])
  interview           Interview                @relation(fields: [interviewId], references: [id])

  @@map("assessments")
}

model GitHubAnalysis {
  id                 String       @id @default(cuid())
  candidateId        String
  organizationId     String
  username           String
  profileData        String
  repositories       String
  contributions      String
  languageStats      String
  activityScore      Float
  codeQualityScore   Float
  collaborationScore Float
  consistencyScore   Float
  overallScore       Float
  insights           String
  analyzedAt         DateTime     @default(now())
  organization       Organization @relation(fields: [organizationId], references: [id])
  candidate          Candidate    @relation(fields: [candidateId], references: [id])

  @@map("github_analysis")
}

model UploadedFile {
  id             String       @id @default(cuid())
  filename       String
  originalName   String
  filePath       String
  fileSize       Int
  mimeType       String
  type           String
  uploadedBy     String
  candidateId    String?
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  candidate      Candidate?   @relation("CandidateFiles", fields: [candidateId], references: [id])
  uploader       User         @relation("UserUploads", fields: [uploadedBy], references: [id], onDelete: Cascade)

  @@map("uploaded_files")
}

model SecurityLog {
  id        String   @id @default(cuid())
  type      String
  ip        String
  userAgent String
  path      String
  userId    String?
  details   String
  timestamp DateTime @default(now())

  @@map("security_logs")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  ip        String
  userAgent String
  details   String
  timestamp DateTime @default(now())

  @@map("audit_logs")
}

enum SubscriptionPlan {
  FREE
  BASIC
  PRO
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  PAST_DUE
  UNPAID
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

enum UserRole {
  ADMIN
  RECRUITER
  INTERVIEWER
  CANDIDATE
}

enum CandidateStatus {
  APPLIED
  SCREENING
  INTERVIEWING
  ASSESSMENT
  OFFERED
  HIRED
  REJECTED
}

enum InterviewType {
  TECHNICAL
  BEHAVIORAL
  SYSTEM_DESIGN
  CODING_CHALLENGE
  CULTURAL_FIT
}

enum InterviewStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum AssessmentRecommendation {
  STRONG_HIRE
  HIRE
  NO_HIRE
  STRONG_NO_HIRE
}
